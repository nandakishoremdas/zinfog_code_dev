# -*- coding: utf-8 -*-
#############################################################################
#
#    You can modify it under the terms of the GNU AFFERO
#    GENERAL PUBLIC LICENSE (AGPL v3), Version 3.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU AFFERO GENERAL PUBLIC LICENSE (AGPL v3) for more details.
#
#    You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE
#    (AGPL v3) along with this program.
#    If not, see <http://www.gnu.org/licenses/>.
#
#############################################################################
from odoo import models
from odoo.tools import float_compare
from odoo.addons.sale_stock.models.sale_order_line import SaleOrderLine


class SaleOrderlineInherit(models.Model):
    """
    This class extends the 'sale.order.line' model to Monkey patch the default
    method to add condition to enter.
    """
    _inherit = 'sale.order.line'

    def _action_launch_stock_rule(self, previous_product_uom_qty=False):
        """
        Launch procurement group run method with required/custom fields generated by a
        sale order line. procurement group will launch '_run_pull', '_run_buy' or '_run_manufacture'
        depending on the sale order line product rule.
        """
        auto_workflow = self.env['ir.config_parameter'].sudo().get_param('sale_order_enhancement.auto_workflow')
        if not auto_workflow:
            if self._context.get("skip_procurement"):
                return True
            precision = self.env['decimal.precision'].precision_get('Product Unit of Measure')
            procurements = []
            for line in self:
                line = line.with_company(line.company_id)
                if line.state != 'sale' or line.order_id.locked or not line.product_id.type in ('consu', 'product'):
                    continue
                qty = line._get_qty_procurement(previous_product_uom_qty)
                if float_compare(qty, line.product_uom_qty, precision_digits=precision) == 0:
                    continue

                group_id = line._get_procurement_group()
                if not group_id:
                    group_id = self.env['procurement.group'].create(line._prepare_procurement_group_vals())
                    line.order_id.procurement_group_id = group_id
                else:
                    # In case the procurement group is already created and the order was
                    # cancelled, we need to update certain values of the group.
                    updated_vals = {}
                    if group_id.partner_id != line.order_id.partner_shipping_id:
                        updated_vals.update({'partner_id': line.order_id.partner_shipping_id.id})
                    if group_id.move_type != line.order_id.picking_policy:
                        updated_vals.update({'move_type': line.order_id.picking_policy})
                    if updated_vals:
                        group_id.write(updated_vals)

                values = line._prepare_procurement_values(group_id=group_id)
                product_qty = line.product_uom_qty - qty

                line_uom = line.product_uom
                quant_uom = line.product_id.uom_id
                product_qty, procurement_uom = line_uom._adjust_uom_quantities(product_qty, quant_uom)
                procurements.append(line._create_procurement(product_qty, procurement_uom, values))
            if procurements:
                self.env['procurement.group'].run(procurements)

            # This next block is currently needed only because the scheduler trigger is done by picking confirmation rather than stock.move confirmation
            orders = self.mapped('order_id')
            for order in orders:
                pickings_to_confirm = order.picking_ids.filtered(lambda p: p.state not in ['cancel', 'done'])
                if pickings_to_confirm:
                    # Trigger the Scheduler for Pickings
                    pickings_to_confirm.action_confirm()
            return True

    SaleOrderLine._action_launch_stock_rule = _action_launch_stock_rule
